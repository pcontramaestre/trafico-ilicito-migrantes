---
interface Props {
	title: string;
}


const { title } = Astro.props;
import "aos/dist/aos.css"; // AOS styles
import { Tooltips } from 'astro-tooltips';
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Voces y datos del TRÁFICO ILÍCITO DE MIGRANTES" />
		<meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no">
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		<!-- <script src="//cdnjs.cloudflare.com/ajax/libs/gsap/3.9.1/gsap.min.js" is:inline></script> -->
		<script src="/js/TweenMax.min.js" is:inline></script>
		<script src="/js/TimelineMax.min.js" is:inline></script>
		<script src="/js/ScrollMagic.min.js" is:inline></script>
		<script src="/js/debug.addIndicators.min.js" is:inline></script>
		<script src="/js/animation.gsap.js" is:inline></script>
		<script src="/js/ScrollToPlugin.min.js" is:inline></script>
		<script src="/js/audioPlayer.js" is:inline defer></script>
		<Tooltips interactive={false} delay={[15, 14000]} />
	</head>
	<body class="overflow-x-hidden">
		<div id="player" class="hidden"></div> 
		<slot />
		<script is:inline src="/js/script.js"></script>
		<script is:inline src="/js/section2.js"></script>
		<script is:inline src="/js/section4.js"></script>
		<script is:inline src="/js/section5.js"></script>
		<script is:inline src="/js/section6.js"></script>
		<script is:inline src="/js/section7.js"></script>
		<script is:inline src="/js/section8.js"></script>
		
	</body>
</html>
<style is:global>
	:root {
		--accent: 136, 58, 234;
		--accent-light: 224, 204, 250;
		--accent-dark: 49, 10, 101;
		--accent-gradient: linear-gradient(
			45deg,
			rgb(var(--accent)),
			rgb(var(--accent-light)) 30%,
			white 60%
		);
	}
	html {
		font-family: 'Inter Variable', sans-serif;
	}
	body {
		overflow-x: hidden;
		max-width: 100vw;
	}
	#seccion1-1,
	#seccion1-2,
	#seccion1-3,
	#seccion2-1,
	#seccion3,
	#seccion4,
	#seccion5,
	#seccion6,
	#seccion7,
	#seccion8 {
		overflow-x: hidden;
		max-width: 100vw;
	}

</style>

<script is:inline>  
	// 2. This code loads the IFrame Player API code asynchronously.
	var tag = document.createElement('script');

	tag.src = "https://www.youtube.com/iframe_api";
	var firstScriptTag = document.getElementsByTagName('script')[0];
	firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

	// 3. This function creates an <iframe> (and YouTube player)
	//    after the API code downloads.
	var player;
	function onYouTubeIframeAPIReady() {
		player = new YT.Player('player', {
			height: '360',
			width: '640',
			videoId: 'j-iIpGze5W4',
			playerVars: {  
            'autoplay': 1, // Iniciar automáticamente  
            'controls': 0, // Opcional: ocultar los controles  
          }, 
			events: {
				'onReady': onPlayerReady,
				'onStateChange': onPlayerStateChange
			}
		});
	}

	// 4. The API will call this function when the video player is ready.
	function onPlayerReady(event) {
		event.target.playVideo();
	}

	// 5. The API calls this function when the player's state changes.
	//    The function indicates that when playing a video (state=1),
	//    the player should play for six seconds and then stop.
	var done = false;
	function onPlayerStateChange(event) {
		if (event.data == YT.PlayerState.PLAYING && !done) {
			//setTimeout(stopVideo, 6000);
			done = true;
		}
	}
	function stopVideo() {
		player.stopVideo();
	}

</script>